// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shard.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		shard.proto

	It has these top-level messages:
		Stats
		CacheShard
		ShardTransfer
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import queue "github.com/allegro/bigcache/queue/pb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// our stats encoder.
type Stats struct {
	Hits       int64 `protobuf:"varint,1,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses     int64 `protobuf:"varint,2,opt,name=misses,proto3" json:"misses,omitempty"`
	DelHits    int64 `protobuf:"varint,3,opt,name=delHits,proto3" json:"delHits,omitempty"`
	DelMisses  int64 `protobuf:"varint,4,opt,name=delMisses,proto3" json:"delMisses,omitempty"`
	Collisions int64 `protobuf:"varint,5,opt,name=collisions,proto3" json:"collisions,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorShard, []int{0} }

func (m *Stats) GetHits() int64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Stats) GetMisses() int64 {
	if m != nil {
		return m.Misses
	}
	return 0
}

func (m *Stats) GetDelHits() int64 {
	if m != nil {
		return m.DelHits
	}
	return 0
}

func (m *Stats) GetDelMisses() int64 {
	if m != nil {
		return m.DelMisses
	}
	return 0
}

func (m *Stats) GetCollisions() int64 {
	if m != nil {
		return m.Collisions
	}
	return 0
}

// our shard encoder. we can't easily encode all aspect of the shard, such as a logger, so we use the important
// aspects, such as the raw data.
type CacheShard struct {
	Hashmap     map[uint64]uint32 `protobuf:"bytes,1,rep,name=hashmap" json:"hashmap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Entries     *queue.BytesQueue `protobuf:"bytes,2,opt,name=entries" json:"entries,omitempty"`
	Entrybuffer []byte            `protobuf:"bytes,3,opt,name=entrybuffer,proto3" json:"entrybuffer,omitempty"`
	IsVerbose   bool              `protobuf:"varint,4,opt,name=isVerbose,proto3" json:"isVerbose,omitempty"`
	LifeWindow  uint64            `protobuf:"varint,5,opt,name=lifeWindow,proto3" json:"lifeWindow,omitempty"`
	Stats       *Stats            `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
}

func (m *CacheShard) Reset()                    { *m = CacheShard{} }
func (m *CacheShard) String() string            { return proto.CompactTextString(m) }
func (*CacheShard) ProtoMessage()               {}
func (*CacheShard) Descriptor() ([]byte, []int) { return fileDescriptorShard, []int{1} }

func (m *CacheShard) GetHashmap() map[uint64]uint32 {
	if m != nil {
		return m.Hashmap
	}
	return nil
}

func (m *CacheShard) GetEntries() *queue.BytesQueue {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *CacheShard) GetEntrybuffer() []byte {
	if m != nil {
		return m.Entrybuffer
	}
	return nil
}

func (m *CacheShard) GetIsVerbose() bool {
	if m != nil {
		return m.IsVerbose
	}
	return false
}

func (m *CacheShard) GetLifeWindow() uint64 {
	if m != nil {
		return m.LifeWindow
	}
	return 0
}

func (m *CacheShard) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// this is for transfering individual shards. we need to know the index of the original shard's location so we can
// insert it into the new cache as a preexisting shard. so we are enveloping the shard in a transfer message.
type ShardTransfer struct {
	ShardIndex uint64      `protobuf:"varint,1,opt,name=shardIndex,proto3" json:"shardIndex,omitempty"`
	Shard      *CacheShard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *ShardTransfer) Reset()                    { *m = ShardTransfer{} }
func (m *ShardTransfer) String() string            { return proto.CompactTextString(m) }
func (*ShardTransfer) ProtoMessage()               {}
func (*ShardTransfer) Descriptor() ([]byte, []int) { return fileDescriptorShard, []int{2} }

func (m *ShardTransfer) GetShardIndex() uint64 {
	if m != nil {
		return m.ShardIndex
	}
	return 0
}

func (m *ShardTransfer) GetShard() *CacheShard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func init() {
	proto.RegisterType((*Stats)(nil), "bigcache.Stats")
	proto.RegisterType((*CacheShard)(nil), "bigcache.CacheShard")
	proto.RegisterType((*ShardTransfer)(nil), "bigcache.ShardTransfer")
}
func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hits != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Hits))
	}
	if m.Misses != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Misses))
	}
	if m.DelHits != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.DelHits))
	}
	if m.DelMisses != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.DelMisses))
	}
	if m.Collisions != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Collisions))
	}
	return i, nil
}

func (m *CacheShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheShard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashmap) > 0 {
		for k, _ := range m.Hashmap {
			dAtA[i] = 0xa
			i++
			v := m.Hashmap[k]
			mapSize := 1 + sovShard(uint64(k)) + 1 + sovShard(uint64(v))
			i = encodeVarintShard(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintShard(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintShard(dAtA, i, uint64(v))
		}
	}
	if m.Entries != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Entries.Size()))
		n1, err := m.Entries.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Entrybuffer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.Entrybuffer)))
		i += copy(dAtA[i:], m.Entrybuffer)
	}
	if m.IsVerbose {
		dAtA[i] = 0x20
		i++
		if m.IsVerbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LifeWindow != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.LifeWindow))
	}
	if m.Stats != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Stats.Size()))
		n2, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ShardTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.ShardIndex))
	}
	if m.Shard != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Shard.Size()))
		n3, err := m.Shard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if m.Hits != 0 {
		n += 1 + sovShard(uint64(m.Hits))
	}
	if m.Misses != 0 {
		n += 1 + sovShard(uint64(m.Misses))
	}
	if m.DelHits != 0 {
		n += 1 + sovShard(uint64(m.DelHits))
	}
	if m.DelMisses != 0 {
		n += 1 + sovShard(uint64(m.DelMisses))
	}
	if m.Collisions != 0 {
		n += 1 + sovShard(uint64(m.Collisions))
	}
	return n
}

func (m *CacheShard) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashmap) > 0 {
		for k, v := range m.Hashmap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovShard(uint64(k)) + 1 + sovShard(uint64(v))
			n += mapEntrySize + 1 + sovShard(uint64(mapEntrySize))
		}
	}
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.Entrybuffer)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.IsVerbose {
		n += 2
	}
	if m.LifeWindow != 0 {
		n += 1 + sovShard(uint64(m.LifeWindow))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	return n
}

func (m *ShardTransfer) Size() (n int) {
	var l int
	_ = l
	if m.ShardIndex != 0 {
		n += 1 + sovShard(uint64(m.ShardIndex))
	}
	if m.Shard != nil {
		l = m.Shard.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	return n
}

func sovShard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			m.Hits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hits |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misses", wireType)
			}
			m.Misses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Misses |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelHits", wireType)
			}
			m.DelHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelHits |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelMisses", wireType)
			}
			m.DelMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelMisses |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collisions", wireType)
			}
			m.Collisions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collisions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashmap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hashmap == nil {
				m.Hashmap = make(map[uint64]uint32)
			}
			var mapkey uint64
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipShard(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthShard
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Hashmap[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &queue.BytesQueue{}
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entrybuffer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entrybuffer = append(m.Entrybuffer[:0], dAtA[iNdEx:postIndex]...)
			if m.Entrybuffer == nil {
				m.Entrybuffer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerbose = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeWindow", wireType)
			}
			m.LifeWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifeWindow |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shard == nil {
				m.Shard = &CacheShard{}
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shard.proto", fileDescriptorShard) }

var fileDescriptorShard = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x9d, 0xb6, 0x69, 0xd7, 0xd3, 0x5d, 0x74, 0x87, 0x45, 0xc2, 0x22, 0xa1, 0x16, 0x84,
	0x45, 0x21, 0x95, 0xf5, 0x46, 0xd6, 0xbb, 0x15, 0x61, 0xbd, 0xf0, 0xc2, 0xa9, 0x28, 0xe8, 0xd5,
	0xa4, 0x39, 0x6d, 0x06, 0xa7, 0x99, 0x3a, 0x33, 0x51, 0xfb, 0x0c, 0xbe, 0x80, 0xaf, 0xe2, 0x1b,
	0x78, 0xe9, 0x23, 0x48, 0x7d, 0x11, 0x99, 0x93, 0x84, 0xe4, 0xc2, 0x9b, 0x70, 0xce, 0x7f, 0xce,
	0x0c, 0xff, 0xf7, 0x67, 0x60, 0xea, 0x0a, 0x69, 0xf3, 0x74, 0x67, 0x8d, 0x37, 0xfc, 0x28, 0x53,
	0x9b, 0x95, 0x5c, 0x15, 0x78, 0x7e, 0xfa, 0xb9, 0xc2, 0x0a, 0x17, 0xf4, 0xad, 0x87, 0xf3, 0xef,
	0x0c, 0xa2, 0xa5, 0x97, 0xde, 0x71, 0x0e, 0xa3, 0x42, 0x79, 0x17, 0xb3, 0x19, 0xbb, 0x18, 0x0a,
	0xaa, 0xf9, 0x3d, 0x18, 0x6f, 0x95, 0x73, 0xe8, 0xe2, 0x01, 0xa9, 0x4d, 0xc7, 0x63, 0x98, 0xe4,
	0xa8, 0x6f, 0xc2, 0xfa, 0x90, 0x06, 0x6d, 0xcb, 0xef, 0xc3, 0xed, 0x1c, 0xf5, 0xeb, 0xfa, 0xd0,
	0x88, 0x66, 0x9d, 0xc0, 0x13, 0x80, 0x95, 0xd1, 0x5a, 0x39, 0x65, 0x4a, 0x17, 0x47, 0x34, 0xee,
	0x29, 0xf3, 0x9f, 0x03, 0x80, 0x17, 0xc1, 0xea, 0x32, 0xf8, 0xe7, 0xcf, 0x61, 0x52, 0x48, 0x57,
	0x6c, 0xe5, 0x2e, 0x66, 0xb3, 0xe1, 0xc5, 0xf4, 0xf2, 0x41, 0xda, 0xb2, 0xa4, 0xdd, 0x5a, 0x7a,
	0x53, 0xef, 0xbc, 0x2c, 0xbd, 0xdd, 0x8b, 0xf6, 0x04, 0x7f, 0x0c, 0x13, 0x2c, 0xbd, 0x55, 0x8d,
	0xf9, 0xe9, 0xe5, 0x69, 0x5a, 0x83, 0x5f, 0xef, 0x3d, 0xba, 0x37, 0xa1, 0x14, 0xed, 0x06, 0x9f,
	0xc1, 0x34, 0x94, 0xfb, 0xac, 0x5a, 0xaf, 0xd1, 0x12, 0xd4, 0xb1, 0xe8, 0x4b, 0x01, 0x4c, 0xb9,
	0x77, 0x68, 0x33, 0xe3, 0x90, 0xc0, 0x8e, 0x44, 0x27, 0x04, 0x30, 0xad, 0xd6, 0xf8, 0x5e, 0x95,
	0xb9, 0xf9, 0x4a, 0x60, 0x23, 0xd1, 0x53, 0xf8, 0x43, 0x88, 0x5c, 0x48, 0x39, 0x1e, 0x93, 0x95,
	0x3b, 0x1d, 0x07, 0x85, 0x2f, 0xea, 0xe9, 0xf9, 0x15, 0x1c, 0xf7, 0x61, 0xf8, 0x5d, 0x18, 0x7e,
	0xc2, 0x3d, 0xfd, 0x92, 0x91, 0x08, 0x25, 0x3f, 0x83, 0xe8, 0x8b, 0xd4, 0x15, 0x12, 0xd3, 0x89,
	0xa8, 0x9b, 0xab, 0xc1, 0x33, 0x36, 0xff, 0x08, 0x27, 0x14, 0xc7, 0x5b, 0x2b, 0x4b, 0x17, 0x1c,
	0x27, 0x00, 0xf4, 0x0c, 0x5e, 0x95, 0x39, 0x7e, 0x6b, 0xee, 0xe8, 0x29, 0xfc, 0x11, 0x44, 0xd4,
	0x35, 0xf1, 0x9c, 0xfd, 0x2f, 0x5b, 0x51, 0xaf, 0x5c, 0x3f, 0xf9, 0x75, 0x48, 0xd8, 0xef, 0x43,
	0xc2, 0xfe, 0x1c, 0x12, 0xf6, 0xe3, 0x6f, 0x72, 0xeb, 0x43, 0xb2, 0x51, 0xbe, 0xa8, 0xb2, 0x74,
	0x65, 0xb6, 0x0b, 0xa9, 0x35, 0x6e, 0xac, 0x59, 0xb4, 0x17, 0x2c, 0x76, 0x59, 0x36, 0xa6, 0xf7,
	0xf5, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x6b, 0x70, 0x45, 0x8b, 0x02, 0x00, 0x00,
}
